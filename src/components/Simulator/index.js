import React, { useCallback, useState, useEffect } from 'react'

const Simulator = ({ totalYears, baseEfficacy, efficacyImprovementOdds, efficacyImprovementLevel, triesPerExploitInterval }) => {
    const [efficacy, setEfficacy] = useState(baseEfficacy);
    const [totalScore, setTotalScore] = useState(0);
    const [yearsRemaining, setYearsRemaining] = useState(totalYears);
    const [finalGrade, setFinalGrade] = useState("F");
    const [completionSectionVisible, setCompletionSectionVisible] = useState(false);

    const getLetterGradeForScore = useCallback (() => {
        if (totalScore < 60) return "F";
        if (totalScore < 70) return "D";
        if (totalScore < 80) return "C";
        if (totalScore < 90) return "B";
        if (totalScore < 100) return "A";
        return "A (with extra credit)";
    }, [totalScore]);

    useEffect (() => {
        if (yearsRemaining === 0) {
            setFinalGrade(getLetterGradeForScore());
            setCompletionSectionVisible(true);
        }
    }, [yearsRemaining, setFinalGrade, getLetterGradeForScore, setCompletionSectionVisible]);

    const reset = useCallback (() => {
        setCompletionSectionVisible(false);
        setYearsRemaining(totalYears);
        setTotalScore(0);
        setEfficacy(baseEfficacy);
    }, [setCompletionSectionVisible, setYearsRemaining, setTotalScore, setEfficacy, baseEfficacy, totalYears]);

    const researchForYear = useCallback(() => {
        const isResearchSuccessful = Math.random() > efficacyImprovementOdds;
        if (isResearchSuccessful) {
            setEfficacy(Math.floor(efficacy + efficacyImprovementLevel));
        }

        setYearsRemaining(yearsRemaining - 1);
    }, [efficacy, setEfficacy, efficacyImprovementOdds, efficacyImprovementLevel, yearsRemaining, setYearsRemaining]);

    const distributeForYear = useCallback(() => {
        setTotalScore(Math.floor(triesPerExploitInterval * efficacy) + totalScore);

        setYearsRemaining(yearsRemaining - 1);
    }, [efficacy, triesPerExploitInterval, totalScore, setTotalScore, yearsRemaining, setYearsRemaining]);

    return <div>
        <div>
            Hours Remaining: {yearsRemaining}
        </div>
        <div>
            Points Per Writing Hour: {efficacy}
        </div>
        <div>
            Current Score: {totalScore}
        </div>
        <div>
            <button onClick={researchForYear} disabled={yearsRemaining < 1}>Research!</button>
            <button onClick={distributeForYear} disabled={yearsRemaining < 1}>Write!</button>
        </div>
        {completionSectionVisible && 
            <div>
                <div>You got {totalScore} points, for the letter grade {finalGrade}.</div>
                <div>Try again? <button onClick={reset}>Reset</button></div>
            </div>
        }
    </div>
}

export default Simulator;